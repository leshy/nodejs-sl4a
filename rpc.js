// Generated by LiveScript 1.4.0
(function(){
  var net, EventEmitter, Android;
  net = require('net');
  EventEmitter = require('events').EventEmitter;
  exports.Android = Android = (function(superclass){
    var prototype = extend$((import$(Android, superclass).displayName = 'Android', Android), superclass).prototype, constructor = Android;
    function Android(host, port){
      var this$ = this;
      host == null && (host = 'localhost');
      port == null && (port = 6666);
      this.msgId = 0;
      this.client = new net.Socket();
      console.log('connecting to', host, port);
      this.client.connect(port, host, function(){
        this$.connected = true;
        console.log('connected');
        return this$.emit('connected', this$);
      });
      this.client.on('data', function(data){
        data = JSON.parse(String(data));
        return this$.emit("msg_" + data.id, data);
      });
      this.client.on('close', function(){
        return console.log('disconnected');
      });
    }
    prototype.query = function(method, params, callback){
      var doit, this$ = this;
      params == null && (params = []);
      doit = function(){
        var id;
        console.log('query', method, params);
        this$.client.write(JSON.stringify({
          id: id = this$.msgId++,
          method: method,
          params: params
        }) + "\n");
        if (callback) {
          return this$.once("msg_" + id, callback);
        }
      };
      if (this.connected) {
        return doit();
      } else {
        return this.once('connected', doit);
      }
    };
    prototype.close = function(){
      return this.client.destroy();
    };
    return Android;
  }(EventEmitter));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
